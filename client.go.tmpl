{{define "client"}}

{{- $typeMap := .TypeMap -}}

{{- if .Services}}
//
// Client
//

{{- range .Services}}
pub struct {{.Name}} {
  hostname: String,
  path: String
}

impl {{.Name}} {
  pub fn new(hostname: String) -> {{.Name}} {
    {{.Name}} {
      hostname,
      path: "/rpc/{{.Name}}/".to_string()
    }
  }
}

impl {{.Name}} {
  {{- range $_, $method := .Methods}}
  pub fn {{snakeCase .Name}} (&self, {{if gt (len .Inputs) 0}}args: {{.Name}}Args{{end}}) -> Pin<Box<dyn Future<Output = Result<{{$method.Name}}Return, WebRPCError>> + '_>> {
    Box::pin(async move {
      let url = format!("{}{}{{.Name}}", self.hostname, self.path);
      reqwest::Client::new()
        .post(&url)
      {{- if gt (len .Inputs) 0}}
        .json(&args)
      {{- end}}
        .send()
        .await.map_err(WebRPCError::from)?
        .json()
        .await.map_err(WebRPCError::from)
    })
  }
  {{- end}}
}
{{end -}}
{{end -}}
{{end}}