// rust v1.0.0 fea55f272f9c59f99a3a679c477a1dbea8fd99f6
// --
// Code generated by webrpc-gen@v0.8.2 with custom generator. DO NOT EDIT.
//
// webrpc-gen -schema=service.ridl -target=../../ -client -out=./client/src/gen.rs

// WebRPC description and code-gen version
pub const WEBRPC_VERSION: &'static str = "v1";

// Schema version of your RIDL schema
pub const WEBRPC_SCHEMA_VERSION: &'static str = "v1.0.0";

// Schema hash generated from your RIDL schema
pub const WEBRPC_SCHEMA_HASH: &'static str = "fea55f272f9c59f99a3a679c477a1dbea8fd99f6";

use core::future::Future;
use core::pin::Pin;
use std::collections::HashMap;

//
// Types
//

#[derive(Debug)]
pub enum WebRPCError {
  Reqwest(reqwest::Error),
  Serde(serde_json::Error),
}

impl From<serde_json::Error> for WebRPCError {
  fn from(err: serde_json::Error) -> Self {
    Self::Serde(err)
  }
}

impl From<reqwest::Error> for WebRPCError {
  fn from(err: reqwest::Error) -> Self {
    Self::Reqwest(err)
  }
}
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub enum Kind {
  #[serde(rename = "USER")]
  User,
  #[serde(rename = "ADMIN")]
  Admin
}

#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct User {
  #[serde(rename = "id")]
  id: u64,
  #[serde(rename = "USERNAME")]
  username: String,
  #[serde(rename = "role")]
  role: Kind,
  #[serde(rename = "meta")]
  meta: HashMap<String, String>,
  
  #[serde(rename = "createdAt")]
  created_at: Option<String>,
}

#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct Page {
  #[serde(rename = "num")]
  num: u32,
}


#[derive(Debug, serde::Serialize)]
pub struct PingArgs {
}

#[derive(Debug, serde::Deserialize)]
pub struct PingReturn {  
}
#[derive(Debug, serde::Serialize)]
pub struct GetUserArgs {
  #[serde(rename = "userID")]
  pub user_id: u64,
}

#[derive(Debug, serde::Deserialize)]
pub struct GetUserReturn {
  #[serde(rename = "code")]
  pub code: u32,
  #[serde(rename = "user")]
  pub user: User,  
}


  
//
// Client
//
pub struct ExampleService {
  hostname: String,
  path: String
}

impl ExampleService {
  pub fn new(hostname: String) -> ExampleService {
    ExampleService {
      hostname,
      path: "/rpc/ExampleService/".to_string()
    }
  }
}

impl ExampleService {
  pub fn ping (&self, ) -> Pin<Box<dyn Future<Output = Result<PingReturn, WebRPCError>> + '_>> {
    Box::pin(async move {
      let url = format!("{}{}Ping", self.hostname, self.path);
      reqwest::Client::new()
        .post(&url)
        .send()
        .await.map_err(WebRPCError::from)?
        .json()
        .await.map_err(WebRPCError::from)
    })
  }
  pub fn get_user (&self, args: GetUserArgs) -> Pin<Box<dyn Future<Output = Result<GetUserReturn, WebRPCError>> + '_>> {
    Box::pin(async move {
      let url = format!("{}{}GetUser", self.hostname, self.path);
      reqwest::Client::new()
        .post(&url)
        .json(&args)
        .send()
        .await.map_err(WebRPCError::from)?
        .json()
        .await.map_err(WebRPCError::from)
    })
  }
}
